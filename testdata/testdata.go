// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package testdata generated by go-bindata.// sources:
// pkg/sharutils.yaml
package testdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgSharutilsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x5b\x6b\x1b\x3f\x10\xc5\xdf\xf5\x29\x06\xff\x21\x86\x3f\xec\xc5\x97\x5d\x7b\x05\x0d\xb4\x25\x85\x50\x48\x0a\x69\x9f\x4a\x59\xb4\xa3\x91\x57\x58\xab\xdd\xea\x62\x9c\x7e\xfa\xa2\x8d\xe3\x06\x4a\x1f\xcf\xcc\x1c\xe9\xcc\x8f\xb1\x62\x20\x0e\xbe\x17\x2e\x06\x6d\x3c\x3b\x91\xf3\x7a\xb4\x1c\xb6\xf9\xaa\xca\xd7\xcc\x91\x21\xe1\x89\x83\x8d\xc6\x30\x49\x1e\x9d\x9e\xc2\x3c\xb1\xf8\xda\x13\x3c\xbd\x3a\x61\x12\x78\x14\x07\x02\x1c\x6d\x10\xda\x7a\x48\x65\x1d\x34\x79\x08\xbd\x08\x80\xc2\x02\x3a\x12\x81\x60\xe9\x7b\x32\x66\x09\xc2\x61\xaf\x4f\xe4\x17\xcc\xc7\x61\x10\xee\x99\xc3\xe2\x1a\xe5\x8d\x5f\x8d\x0e\x66\xcb\x1b\x87\xa3\x9f\x51\x3b\xf2\x1c\xbe\xff\x60\x93\x1b\x4f\x5a\x5e\x84\xb6\x3e\xb8\x88\x29\xa4\xe7\x2c\x83\x68\x53\x34\x0e\x41\x38\xc8\xce\x27\xf5\x67\xdb\xec\x65\xc9\x3c\x08\x97\x9f\x7f\xc1\xcd\x0d\xa0\xfc\xab\xcb\x00\x26\x47\x29\x19\x49\xc8\x34\x2c\x7d\x71\xff\xd8\xaa\xe0\x9e\xcd\x88\x47\xa5\x0d\x25\x7d\xf7\xf8\xa9\x7d\xba\xbb\x7b\x28\x96\x60\x74\x57\xfc\x9f\x63\x7a\x8e\xb0\x1f\x61\xf9\x9f\x24\xa5\x2d\x41\x7b\xff\xd8\xde\x3f\xb4\x1f\xde\x7f\xfc\xfc\xed\x0b\x94\xe7\x55\x59\x2e\xe1\xf6\x76\x36\xf8\x20\xf5\x98\xe9\x61\x32\x79\xbf\x60\x90\x28\x2a\x7d\x88\xf3\xc7\x79\x71\x55\x90\x65\x93\x23\xa5\xcf\xef\x8a\xe8\x5d\x1a\xec\xa2\x36\x92\xc3\x62\x10\x47\x4a\x3a\x90\x0f\x17\x09\xd8\x13\x1e\x53\x31\x21\x11\xc6\xbc\xd6\x2f\x32\x75\xa6\x71\x1e\x5f\x30\x3f\x46\x87\x34\x03\xbb\x40\xe6\xd0\x87\x30\xf1\xa2\x50\x61\xca\x0f\x36\xe6\xa3\x3b\x14\x07\x1b\x8b\x2b\xa1\xe2\x1f\x24\x19\xc0\x20\x2b\x0e\x55\xb3\xab\x90\xd6\x2b\x29\x36\xf5\xb6\x59\xc9\x9d\x10\xb5\xc4\x75\x57\xca\x66\xb7\xdf\x53\xc9\x20\xd1\x5e\x57\x35\x87\x75\x57\x56\xa8\xd4\x4e\x52\x25\x77\x5d\xbd\xad\x25\xae\xea\xba\xe9\x70\x53\xe3\xa6\x52\x52\x60\xb9\x16\x58\x0b\xda\x76\x35\xae\x1a\xec\x36\x9b\x6d\x29\xf7\x3b\xc2\xaa\xda\x88\x46\x30\x00\x49\x3e\x68\x2b\x5e\x8e\x33\xe1\x61\x93\x11\x41\x8d\x6e\x68\xb5\xe4\x70\xde\xd7\x6d\xbd\xcd\x8c\xf2\x99\xd1\x36\x9e\xb3\x86\x5d\x4e\x76\x3e\x8d\x14\xfb\x77\x00\x00\x00\xff\xff\x98\x23\x56\x83\x0d\x03\x00\x00")

func pkgSharutilsYamlBytes() ([]byte, error) {
	return bindataRead(
		_pkgSharutilsYaml,
		"pkg/sharutils.yaml",
	)
}

func pkgSharutilsYaml() (*asset, error) {
	bytes, err := pkgSharutilsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/sharutils.yaml", size: 781, mode: os.FileMode(436), modTime: time.Unix(1603046054, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/sharutils.yaml": pkgSharutilsYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": {nil, map[string]*bintree{
		"sharutils.yaml": {pkgSharutilsYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
